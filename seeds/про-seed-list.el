;;; –ø—Ä–æ-seeds-list.el --- –ê–≤—Ç–æ–æ–±–∑–æ—Ä seeds: —Å–ø–∏—Å–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -*- lexical-binding: t -*-
;;; Commentary:
;; –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç bu—Ñ–µ—Ä —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö seeds/*.el —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π docstring.
;;; Code:

(defun –ø—Ä–æ/list-seeds ()
  "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö seeds/ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º."
  (interactive)
  (let* ((dir (expand-file-name "../seeds" user-emacs-directory))
         (files (sort (directory-files dir t "\\.el\\'") #'string<)))
    (with-current-buffer (get-buffer-create "*Seeds Index*")
      (erase-buffer)
      (insert (format "üå± SEEDS (–ø–æ –ü—É—Ç–∏ –î–∞–æ)\n\n  –ö–∞—Ç–∞–ª–æ–≥: %s\n\n" dir))
      (dolist (file files)
        (let ((info (with-temp-buffer
                      (insert-file-contents file)
                      (goto-char (point-min))
                      (if (re-search-forward "^;;; \\(.*\\)--- \\(.*\\) -*-" nil t)
                          (match-string 2)
                        ""))))
          (insert (format "- %s ‚Äî %s\n" (file-name-nondirectory file) info))))
      (goto-char (point-min))
      (view-mode 1)
      (pop-to-buffer (current-buffer)))))

(provide '–ø—Ä–æ-seeds-list)
;;; –ø—Ä–æ-seeds-list.el ends here
