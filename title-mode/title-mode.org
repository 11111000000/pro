:PROPERTIES:
:GPTEL_MODEL: gpt-4.1
:GPTEL_BACKEND: Tunnel OpenAI
:GPTEL_SYSTEM: You are a large language model living in Emacs and a helpful assistant. Respond concisely.
:GPTEL_BOUNDS: ((response (272 1306) (2012 4254) (4256 4607) (4609 6271) (27572 29560)))
:END:

***  Глобальный emacs minor mode под названием =title-mode=. При его активации над каждым окном (=window=) появляется плавающий блок (overlay, popup или child-frame типа eldoc-box), в котором отображается краткое имя буфера (=mode-line-buffer-identification= или просто имя буфера). 
Требования:

1. Блок должен быть аналогичен всплывающему окошку eldoc-box (child-frame предпочтительнее).
2. Блок появляется в каждом открытом окне, когда включён режим.
3. Предусмотреть возможность настройки позиции блока относительно окна (по умолчанию: посередине снизу окна).
4. Желательно реализовать прозрачность блока (через face-attribute, if possible, или opacity property у child-frame).
5. Блок автоматически обновляется при переключении буфера или переименовании.
6. Имя буфера отображается коротко, без полного пути.
7. Режим должен работать и на GUI (особенно - ExWM), и аккуратно degrade-иться в терминале (там просто линейный overlay).
8. Пользовательские настройки: позиция блока, размер в процентах от ширины окна, прозрачность, стиль.

> Тайтлы должны показываться только для отображённых окон с текстовыми буферами (для окон exwm тайтл не нужно показывать
> Тайтл высотой только в одну строку
> Тайтл должен содержать только текст - имя буфера
> Тайтл должен располагаться вверху каждого окна, справа


> Не ПОказывает тайтл у текущего окна, если один буфер во всех окнах. Как будто окна не могут поделить один тайтл на всех. пусть отображает тайтл в каждом окне с одинаковыми буфером.
> Тайтл должен показываться для всех видимых окон, на всех мониторах. Все тайтлы для всех окон должны  отображаться одновременно.
Важно, чтобы оно не ело ресурсы.

#+RESULTS:
: title-mode

По какой-то причине,мод ничего не показывает, как это отладить?

Вот пошаговая инструкция для отладки:

*1. Подключите =posframe= (для графической среды):*
Убедитесь, что установлен пакет posframe (=M-x package-install RET posframe RET=).

*2. Вставьте весь код в отдельный файл (=title-mode.el=).*  
Загрузите его с помощью =M-x load-file=.

*3. Включите режим:*
#+begin_src emacs-lisp
M-x title-mode
#+end_src
  
*4. Убедитесь, что:*
- Вы используете Emacs в графическом режиме (не в терминале).
- В окне открыт текстовый буфер (например, *.el, *.txt или *.org файл).
- Буфер не является EXWM или специальным (имя без пробела в начале).

*5. Включите отладку сообщений:*
Вставьте в начале =.emacs=/=config.el=:
#+begin_src emacs-lisp
(setq debug-on-error t)
#+end_src
  
*6. Выведите сообщения для отладки:*  
Добавьте, например, в функцию =title-mode--show-block= (перед условиями):
#+begin_src emacs-lisp
(message "title-mode: show-block win=%S buf=%S" win (window-buffer win))
#+end_src
В /Messages/ вы должны видеть вызовы для каждого окна.

*7. Проверяйте posframe:*
- Запустите =(posframe-workable-p)=. Должно вернуть =t=.
- Если нет, значит posframe не работает на вашей сборке Emacs (например, терминал).

*8. В терминале:*
- Вместо posframe должны появляться оверлеи; попробуйте разрезать окно (C-x 2, C-x 3) и посмотреть в начале буфера, есть ли дополнительная строка.

*9. Проверьте работу хуков и обновлений:*  
Выполните вручную в /scratch/:
#+begin_src emacs-lisp
(title-mode--update-all)
#+end_src
Если появились тайтлы — значит проблема в хуках.

*10. Ошибка face/цветов:*  
Иногда невидимый тайтл — это просто совпавший фон/цвет текста.  
Попробуйте сделать фон face ярко-красным:
#+begin_src emacs-lisp
(set-face-attribute 'title-mode-block-face nil :background "red" :foreground "black")
#+end_src

*11. Проверьте отображение child-frame:*
Выполните:
#+begin_src emacs-lisp
(posframe-show "test" :string "Hello title")
#+end_src
Должно появиться маленькое фрейм-окно с текстом "Hello title".

---

*Если ничего не получилось*, напишите:
- версию Emacs (=M-x emacs-version=)
- ОС (=M-x system-type=)
- в GUI или в терминале
- говорит ли =(posframe-workable-p)= — =t= или =nil=
- что написано в /Messages/

*Обычно проблема: отсутствует posframe, не графика, перехвачен face, env-фреймы.*

Спасибо за подробный лог!  
*Вывод:* хуки работают, но функция никогда не доходит до попытки отображения окон/тайтлов.

*** Причины

- Нет ни одной строчки вида =[title-mode dbg] all-windows: ...=  
  Значит title-mode--all-visible-windows возвращает пустой список.
- Далее, нет ни одной попытки показать block или сообщения про оконные условия.

---


**Важный вывод:*  
Функция title-mode--all-visible-windows вызывается, но она НЕ выводит  
[title-mode dbg] all-windows count=...  
Значит, после строки  
(message "[title-mode dbg] all-visible-windows CALLED")  
функция КРАШИТСЯ (например, из-за ошибки в let).

---

** Что делать

1. *Добавьте debug-on-error*
#+begin_src elisp
(setq debug-on-error t)
#+end_src
2. *Сделайте явный try-catch внутри title-mode--all-visible-windows:*
#+begin_src elisp
(defun title-mode--all-visible-windows ()
  (message "[title-mode dbg] all-visible-windows CALLED")
  (condition-case err
      (let* ((frames (frame-list))
             (result
              (apply #'append
                     (mapcar
                      (lambda (fr)
                        (when (and (frame-visible-p fr) (frame-live-p fr))
                          (window-list fr 'nomini fr)))
                      frames))))
        (message "[title-mode dbg] all-windows count=%s: %s"
                 (length result)
                 (mapcar (lambda (w)
                           (format "%s(%s)" (buffer-name (window-buffer w)) w))
                         result))
        result)
    (error (message "[title-mode dbg] error in all-visible-windows: %S" err) nil)))
#+end_src
3. *Снова включите title-mode и посмотрите Messages — теперь ошибка должна стать явной!*

---

Ваша проблема ― где-то ошибка в возвращаемых данных или во вложенном mapcar/let.  
Сейчас же эта ошибка просто "глотается", и цикл дальше не идет, поэтому и ни одной строки по ok/skip/show блокам не видно.  
После добавления condition-case вы узнаете точную причину ошибки.

*Сообщите, что появилось в Messages после этого.*

#+begin_src 
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] buffer-list-update
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-buffer-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
Mark set
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
scroll-down-command: Beginning of buffer [8 times]
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
Mark set [2 times]
Copied text from "Debugger entered--Lisp error: (cl-assert"
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] buffer-list-update
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] buffer-list-update
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
windmove-do-window-select: No window right from selected window
windmove-do-window-select: Minibuffer is inactive
[title-mode dbg] buffer-list-update
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] buffer-list-update
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-buffer-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] buffer-list-update
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] window-config-change
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] buffer-list-update
[title-mode dbg] refresh called
[title-mode dbg] update-all: triggered
[title-mode dbg] clear-dead-blocks: removed 0 blocks
[title-mode dbg] all-visible-windows CALLED
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)
[title-mode dbg] TURN OFF
[title-mode dbg] teardown
[title-mode dbg] refresh called
windmove-do-window-select: No window right from selected window [2 times]
Quit
[title-mode dbg] refresh called
windmove-do-window-select: No window right from selected window
[title-mode dbg] refresh called

#+end_src

#+begin_src 
Debugger entered--Lisp error: (cl-assertion-failed ((= 1 (length stickers)) nil))
  cl--assertion-failed((= 1 (length stickers)))
  #f(compiled-function (stickers) #<bytecode 0x11abbd64e1ede764>)(nil)
  #f(compiled-function (reply1) #<bytecode 0x1e2d59f43ba32298>)((:@type "stickers" :stickers [] :@extra 1118))
  telega-server--dispatch-cmd("event" (:@type "stickers" :stickers [] :@extra 1118))
  apply(telega-server--dispatch-cmd ("event" (:@type "stickers" :stickers [] :@extra 1118)))
  telega-server--parse-commands()
  telega-server--filter(#<process telega-server> "event 45\n(:@type \"stickers\" :stickers [] :@extra 1118)\nevent 45\n(:@type \"stickers\" :stickers [] :@extra 1119)\n")
  recursive-edit()
  debug(error (void-variable =) :backtrace-base eval-expression--debug)
  eval-expression--debug((void-variable =))
  eval(= nil)
  elisp--eval-last-sexp(nil)
  #f(compiled-function () #<bytecode 0xf2f308e83db2>)()
  eval-last-sexp(nil)
  funcall-interactively(eval-last-sexp nil)
  command-execute(eval-last-sexp)
  recursive-edit()
  debug(error (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>) :backtrace-base eval-expression--debug)
  eval-expression--debug((wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>))
  window-list(#<frame *scratch* 0x5647976b9020> nomini #<frame *scratch* 0x5647976b9020>)
  (progn (window-list fr 'nomini fr))
  (if (and (frame-visible-p fr) (frame-live-p fr)) (progn (window-list fr 'nomini fr)))
  (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr))
  #f(lambda (fr) :dynbind (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr)))(#<frame *scratch* 0x5647976b9020>)
  mapcar(#f(lambda (fr) :dynbind (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr))) (#<frame  0x564798e1c5a0> #<frame  0x5647a8cbfa48> #<frame  0x5647a915f7e0> #<frame  0x5647a8c98f50> #<frame  0x5647a8c92730> #<frame  0x5647a8f61df0> #<frame  0x5647a8d60bb8> #<frame  0x5647a879fb60> #<frame  0x5647929103a0> #<frame  0x5647a892a768> #<frame  0x5647a83a3330> #<frame  0x5647a86f0ee8> #<frame  0x5647a7d7f370> #<frame  0x5647a6cfc9f8> #<frame  0x5647a83814b8> #<frame  0x5647a8535cd0> #<frame  0x5647a7d7d920> #<frame  0x5647a7f5f890> #<frame  0x5647a82ba670> #<frame  0x5647a77e8900> #<frame  0x5647a820d8a0> #<frame  0x5647a806dbf0> #<frame  0x5647a7588d70> #<frame  0x5647a7a4deb8> #<frame  0x5647a7e46b10> #<frame  0x5647a7a74258> #<frame  0x5647a7163c38> #<frame  0x5647a77c02d0> #<frame  0x5647b8a1a590> #<frame  0x5647a6cdea68> #<frame  0x56479ee0f4a8> #<frame  0x5647a7604db0> #<frame  0x5647aaa20050> #<frame  0x5647aabe2a28> #<frame  0x5647a738be90> #<frame  0x5647a6d93af0> #<frame  0x5647aa9efa30> #<frame  0x56479434d380> #<frame  0x5647b88c8ff0> #<frame  0x56479a0f2db0> #<frame  0x5647aa6110e0> #<frame  0x5647a6bb72d0> #<frame  0x5647968bee70> #<frame  0x564798dfd500> #<frame  0x5647ab95ee00> #<frame  0x564796aa26f8> #<frame  0x5647aab8ecb0> #<frame  0x56479dcc7100> #<frame  0x564799135b00> #<frame  0x564795b4d350> ...))
  (apply #'append (mapcar (lambda (fr) (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr))) (frame-list)))
  (let ((wins (apply #'append (mapcar (lambda (fr) (when (and ... ...) (window-list fr ... fr))) (frame-list))))) (message "[title-mode dbg] all-visible-windows: found %d" (length wins)) wins)
  title-mode--all-visible-windows()
  (let ((tail (title-mode--all-visible-windows))) (while tail (let ((win (car tail))) (when (and (windowp win) (window-live-p win) (not (window-minibuffer-p win)) (title-mode--text-buffer-p (window-buffer win))) (title-mode--show-block win) (puthash win t seen)) (setq tail (cdr tail)))))
  (dolist (win (title-mode--all-visible-windows)) (when (and (windowp win) (window-live-p win) (not (window-minibuffer-p win)) (title-mode--text-buffer-p (window-buffer win))) (title-mode--show-block win) (puthash win t seen)))
  (let ((seen (make-hash-table :test #'eq))) (dolist (win (title-mode--all-visible-windows)) (when (and (windowp win) (window-live-p win) (not (window-minibuffer-p win)) (title-mode--text-buffer-p (window-buffer win))) (title-mode--show-block win) (puthash win t seen))) (maphash (lambda (key _) (unless (gethash key seen) (title-mode--delete-block key))) title-mode--blocks))
  title-mode--update-all()
  eval((title-mode--update-all) t)
  #f(compiled-function () #<bytecode -0x8ede9febd922026>)()
  #f(compiled-function () #<bytecode -0x5db3e1955cb81d1>)()
  eval-expression((title-mode--update-all) nil nil 127)
  funcall-interactively(eval-expression (title-mode--update-all) nil nil 127)
  command-execute(eval-expression)
  recursive-edit()
  debug(error (void-variable =) :backtrace-base eval-expression--debug)
  eval-expression--debug((void-variable =))
  eval(= nil)
  elisp--eval-last-sexp(nil)
  #f(compiled-function () #<bytecode 0xf2f308e83db2>)()
  eval-last-sexp(nil)
  funcall-interactively(eval-last-sexp nil)
  command-execute(eval-last-sexp)
  recursive-edit()
  debug(error (wrong-type-argument windowp #<frame  0x564798e1c5a0>) :backtrace-base eval-expression--debug)
  eval-expression--debug((wrong-type-argument windowp #<frame  0x564798e1c5a0>))
  window-list(#<frame  0x564798e1c5a0> nomini #<frame  0x564798e1c5a0>)
  (progn (window-list fr 'nomini fr))
  (if (and (frame-visible-p fr) (frame-live-p fr)) (progn (window-list fr 'nomini fr)))
  (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr))
  #f(lambda (fr) :dynbind (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr)))(#<frame  0x564798e1c5a0>)
  mapcar(#f(lambda (fr) :dynbind (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr))) (#<frame  0x564798e1c5a0> #<frame  0x5647a8cbfa48> #<frame  0x5647a915f7e0> #<frame  0x5647a8c98f50> #<frame  0x5647a8c92730> #<frame  0x5647a8f61df0> #<frame  0x5647a8d60bb8> #<frame  0x5647a879fb60> #<frame  0x5647929103a0> #<frame  0x5647a892a768> #<frame  0x5647a83a3330> #<frame  0x5647a86f0ee8> #<frame  0x5647a7d7f370> #<frame  0x5647a6cfc9f8> #<frame  0x5647a83814b8> #<frame  0x5647a8535cd0> #<frame  0x5647a7d7d920> #<frame  0x5647a7f5f890> #<frame  0x5647a82ba670> #<frame  0x5647a77e8900> #<frame  0x5647a820d8a0> #<frame  0x5647a806dbf0> #<frame  0x5647a7588d70> #<frame  0x5647a7a4deb8> #<frame  0x5647a7e46b10> #<frame  0x5647a7a74258> #<frame  0x5647a7163c38> #<frame  0x5647a77c02d0> #<frame  0x5647b8a1a590> #<frame  0x5647a6cdea68> #<frame  0x56479ee0f4a8> #<frame  0x5647a7604db0> #<frame  0x5647aaa20050> #<frame  0x5647aabe2a28> #<frame  0x5647a738be90> #<frame  0x5647a6d93af0> #<frame  0x5647aa9efa30> #<frame  0x56479434d380> #<frame  0x5647b88c8ff0> #<frame  0x56479a0f2db0> #<frame  0x5647aa6110e0> #<frame  0x5647a6bb72d0> #<frame  0x5647968bee70> #<frame  0x564798dfd500> #<frame  0x5647ab95ee00> #<frame  0x564796aa26f8> #<frame  0x5647aab8ecb0> #<frame  0x56479dcc7100> #<frame  0x564799135b00> #<frame  0x564795b4d350> ...))
  (apply #'append (mapcar (lambda (fr) (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr))) (frame-list)))
  title-mode--all-visible-windows()
  (let ((tail (title-mode--all-visible-windows))) (while tail (let ((win (car tail))) (when (and (windowp win) (window-live-p win) (not (window-minibuffer-p win)) (title-mode--text-buffer-p (window-buffer win))) (title-mode--show-block win) (puthash win t seen)) (setq tail (cdr tail)))))
  (dolist (win (title-mode--all-visible-windows)) (when (and (windowp win) (window-live-p win) (not (window-minibuffer-p win)) (title-mode--text-buffer-p (window-buffer win))) (title-mode--show-block win) (puthash win t seen)))
  (let ((seen (make-hash-table :test #'eq))) (dolist (win (title-mode--all-visible-windows)) (when (and (windowp win) (window-live-p win) (not (window-minibuffer-p win)) (title-mode--text-buffer-p (window-buffer win))) (title-mode--show-block win) (puthash win t seen))) (maphash (lambda (key _) (unless (gethash key seen) (title-mode--delete-block key))) title-mode--blocks))
  title-mode--update-all()
  eval((title-mode--update-all) nil)
  elisp--eval-last-sexp(nil)
  #f(compiled-function () #<bytecode 0xf2f308e83db2>)()
  eval-last-sexp(nil)
  funcall-interactively(eval-last-sexp nil)
  command-execute(eval-last-sexp)
  recursive-edit()
  debug(error (wrong-type-argument windowp #<frame  0x564798e1c5a0>) :backtrace-base eval-expression--debug)
  eval-expression--debug((wrong-type-argument windowp #<frame  0x564798e1c5a0>))
  window-list(#<frame  0x564798e1c5a0> nomini #<frame  0x564798e1c5a0>)
  (progn (window-list fr 'nomini fr))
  (if (and (frame-visible-p fr) (frame-live-p fr)) (progn (window-list fr 'nomini fr)))
  (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr))
  #f(lambda (fr) :dynbind (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr)))(#<frame  0x564798e1c5a0>)
  mapcar(#f(lambda (fr) :dynbind (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr))) (#<frame  0x564798e1c5a0> #<frame  0x5647a8cbfa48> #<frame  0x5647a915f7e0> #<frame  0x5647a8c98f50> #<frame  0x5647a8c92730> #<frame  0x5647a8f61df0> #<frame  0x5647a8d60bb8> #<frame  0x5647a879fb60> #<frame  0x5647929103a0> #<frame  0x5647a892a768> #<frame  0x5647a83a3330> #<frame  0x5647a86f0ee8> #<frame  0x5647a7d7f370> #<frame  0x5647a6cfc9f8> #<frame  0x5647a83814b8> #<frame  0x5647a8535cd0> #<frame  0x5647a7d7d920> #<frame  0x5647a7f5f890> #<frame  0x5647a82ba670> #<frame  0x5647a77e8900> #<frame  0x5647a820d8a0> #<frame  0x5647a806dbf0> #<frame  0x5647a7588d70> #<frame  0x5647a7a4deb8> #<frame  0x5647a7e46b10> #<frame  0x5647a7a74258> #<frame  0x5647a7163c38> #<frame  0x5647a77c02d0> #<frame  0x5647b8a1a590> #<frame  0x5647a6cdea68> #<frame  0x56479ee0f4a8> #<frame  0x5647a7604db0> #<frame  0x5647aaa20050> #<frame  0x5647aabe2a28> #<frame  0x5647a738be90> #<frame  0x5647a6d93af0> #<frame  0x5647aa9efa30> #<frame  0x56479434d380> #<frame  0x5647b88c8ff0> #<frame  0x56479a0f2db0> #<frame  0x5647aa6110e0> #<frame  0x5647a6bb72d0> #<frame  0x5647968bee70> #<frame  0x564798dfd500> #<frame  0x5647ab95ee00> #<frame  0x564796aa26f8> #<frame  0x5647aab8ecb0> #<frame  0x56479dcc7100> #<frame  0x564799135b00> #<frame  0x564795b4d350> ...))
  (apply #'append (mapcar (lambda (fr) (when (and (frame-visible-p fr) (frame-live-p fr)) (window-list fr 'nomini fr))) (frame-list)))
  title-mode--all-visible-windows()
  (let ((tail (title-mode--all-visible-windows))) (while tail (let ((win (car tail))) (when (and (windowp win) (window-live-p win) (not (window-minibuffer-p win)) (title-mode--text-buffer-p (window-buffer win))) (title-mode--show-block win) (puthash win t seen)) (setq tail (cdr tail)))))
  (dolist (win (title-mode--all-visible-windows)) (when (and (windowp win) (window-live-p win) (not (window-minibuffer-p win)) (title-mode--text-buffer-p (window-buffer win))) (title-mode--show-block win) (puthash win t seen)))
  (let ((seen (make-hash-table :test #'eq))) (dolist (win (title-mode--all-visible-windows)) (when (and (windowp win) (window-live-p win) (not (window-minibuffer-p win)) (title-mode--text-buffer-p (window-buffer win))) (title-mode--show-block win) (puthash win t seen))) (maphash (lambda (key _) (unless (gethash key seen) (title-mode--delete-block key))) title-mode--blocks))
  title-mode--update-all()
  eval((title-mode--update-all) nil)
  elisp--eval-last-sexp(nil)
  #f(compiled-function () #<bytecode 0xf2f308e83db2>)()
  eval-last-sexp(nil)
  funcall-interactively(eval-last-sexp nil)
  command-execute(eval-last-sexp)
  recursive-edit()
  debug(error (wrong-type-argument commandp mark-current-line))
  command-execute(mark-current-line)
  recursive-edit()
  debug(error (void-variable win) :backtrace-base eval-expression--debug)
  eval-expression--debug((void-variable win))
  (message "title-mode: show-block win=%S buf=%S" win (window-buffer win))
  eval((message "title-mode: show-block win=%S buf=%S" win (window-buffer win)) t)
  #f(compiled-function () #<bytecode 0xd7dc3d59475207b>)()
  #f(compiled-function () #<bytecode -0x5db3e1955cb81d1>)()
  eval-expression((message "title-mode: show-block win=%S buf=%S" win (window-buffer win)) nil nil 127)
  funcall-interactively(eval-expression (message "title-mode: show-block win=%S buf=%S" win (window-buffer win)) nil nil 127)
  command-execute(eval-expression)

#+end_src


**Причина ошибки:*
В кадре есть non-window фреймы (скорее всего, unused frames, например, с неинициализированными GUI-фреймами или пакетами типа tab-bar/telega). [=window-list= иногда возвращает не список окон, а сам фрейм!]

*Решение:*
- Надо фильтровать фреймы только с окнами. 
- Также, нельзя =apply #'append= на список, если вложенные элементы могут быть nil (или вовсе не списком окон).

---

*Замените функцию title-mode--all-visible-windows на:*

#+begin_src emacs-lisp
(defun title-mode--all-visible-windows ()
  (message "[title-mode dbg] all-visible-windows CALLED")
  (condition-case err
      (let* ((frames (seq-filter #'frame-live-p (frame-list)))
             (all (cl-loop for fr in frames
                           when (and (frame-visible-p fr) (frame-live-p fr))
                           append (cl-remove-if-not #'window-live-p (window-list fr 'nomini fr)))))
        (message "[title-mode dbg] all-windows count=%d: %s"
                 (length all)
                 (mapcar (lambda (w)
                           (if (windowp w)
                               (format "%s(%s)" (buffer-name (window-buffer w)) w)
                             (format "NONWINDOW(%s)" w)))
                         all))
        all)
    (error (message "[title-mode dbg] error in all-visible-windows: %S" err) nil)))
#+end_src

---

*Возможна альтернатива попроще:*
#+begin_src elisp
(defun title-mode--all-visible-windows ()
  (message "[title-mode dbg] all-visible-windows CALLED")
  (let* ((wins (cl-remove-if-not #'window-live-p (window-list nil 'nomini (selected-frame)))))
    (message "[title-mode dbg] all-windows: found %d windows: %S"
             (length wins)
             (mapcar (lambda (w) (buffer-name (window-buffer w))) wins))
    wins))
#+end_src
*но* первая версия подходит для поддержки нескольких мониторов и всех фреймов.

---

*Теперь всё должно работать.*  
Если появятся ещё ошибки — скопируйте сюда последние log-и; но это главная причина вашей проблемы!

***
#+begin_src 
[title-mode dbg] error in all-visible-windows: (wrong-type-argument windowp #<frame *scratch* 0x5647976b9020>)

#+end_src

